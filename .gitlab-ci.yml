image: hashicorp/terraform:latest

variables:
  TF_VAR_environment: ${CI_COMMIT_REF_NAME}
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

stages:
- lint
- security
- validate
- plan
- cost
- approve
- apply
- test
- cleanup

# Use cache for Terraform files
cache:
  paths:
  - .terraform
  - .terraform.lock.hcl

# Pre-job to check format and lint
lint:
  stage: lint
  script:
  - terraform fmt -check -recursive
  - tflint --recursive
  allow_failure: false

# Security scanning
security_scan:
  stage: security
  image:
    name: aquasec/tfsec:latest
    entrypoint: [ "" ]
  script:
  - tfsec .
  - checkov -d .
  artifacts:
    reports:
      junit: security-report.xml

# Validate Terraform configuration
validate:
  stage: validate
  script:
  - terraform init -backend=false
  - terraform validate
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: '$CI_COMMIT_BRANCH == "main"'

# Generate and store plan
plan:
  stage: plan
  script:
  - terraform init
  - terraform workspace select ${CI_ENVIRONMENT_NAME} || terraform workspace new ${CI_ENVIRONMENT_NAME}
  - terraform plan -out=tfplan
  artifacts:
    paths:
    - tfplan
    reports:
      terraform: tfplan.json
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: '$CI_COMMIT_BRANCH == "main"'

# Cost estimation
cost_estimation:
  stage: cost
  script:
  - infracost breakdown --path . --format json --out-file cost.json
  artifacts:
    reports:
      json: cost.json
    paths:
    - cost.json

# Manual approval for production
approve_production:
  stage: approve
  script:
  - echo "Waiting for approval..."
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
  when: manual
  allow_failure: false

# Apply changes
apply:
  stage: apply
  script:
  - terraform apply -auto-approve tfplan
  dependencies:
  - plan
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
  when: manual
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://${CI_ENVIRONMENT_NAME}.yourdomain.com

# Post-deployment tests
integration_test:
  stage: test
  script:
  - ./scripts/test-infrastructure.sh
  dependencies:
  - apply
  only:
  - main

# Cleanup old workspaces and plans
cleanup:
  stage: cleanup
  script:
  - ./scripts/cleanup-old-workspaces.sh
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
  when: manual
  allow_failure: true

# Scheduled security scans
security_scan_scheduled:
  stage: security
  script:
  - tfsec .
  - checkov -d .
  only:
  - schedules
